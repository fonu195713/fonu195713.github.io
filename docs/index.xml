<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Fonu Site</title>
    <link>https://fonu195713.github.io/docs/</link>
    <description>Recent content in Docs on Fonu Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://fonu195713.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UML</title>
      <link>https://fonu195713.github.io/docs/_trash/design_pattern/unified_modeling_language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/design_pattern/unified_modeling_language/</guid>
      <description>UML#ChatGPT 的說明 UML，全名為 Unified Modeling Language（中文譯作「統一建模語言」）是一種軟體工程領域的模型建置語言，用於描述、設計、和規劃軟體系統的結構和行為。 UML 是一種圖形化的語言，它提供了一組符號和規則，用於創建各種圖表，以幫助軟體開發人員、系統分析師和其他相關人員對於系統的架構進行理解、溝通、和設計軟體。UML 由許多不同的圖表和圖形元素組成，其中一些主要的圖表包括下列幾種：［類別圖］（Class Diagrams）用來描述系統中的類別、物件、屬性和方法之間的關係，這是靜態結構的表示。［使用案例圖］（Use Case Diagrams）用於描述系統的功能和使用者之間的互動，以及用例之間的關係，這有助於捕捉系統的功能需求。［序列圖］（Sequence Diagrams）用於展示系統中物件之間的交互作用和訊息流程，這有助於理解系統的動態行為。［狀態圖］（State Diagrams）用於描述物件的不同狀態以及狀態之間的轉換。［活動圖］（Activity Diagrams）用來描述系統中的流程和操作，類似流程圖。 UML 在軟體開發過程中起著重要作用，它有助於團隊成員之間的溝通，幫助捕捉系統需求，並提供了一種通用的語言，用於設計和文件化軟體系統。 它被廣泛用於軟體開發領域，特別是物件導向的軟體開發，以及系統分析和設計。
在軟體開發中，無論是系統的設計階段、修改類別之間的關係、或者是其他在以「物件」為基本單元情況下，我們通常會使用 UML 圖來詮釋不同類別（Class）、物件（Object）、屬性（Attribute）、方法（Method）以及它們之間的關係。以下是一些類圖中的細節，包括圖形元素和其含義：［類別］（Class）：類別是類別圖的主要元素之一，代表了一個抽象的概念、對象、或實體物件。通常以方框表示，方框中包含類別的名稱、成員變數、和方法。［屬性］（Attributes）屬性又稱作「成員變數」，是類別的特徵或特性，它們描述了類別的狀態。 通常以 &amp;ldquo;名稱：類型&amp;rdquo; 的形式表示，例如 name: String 表示一個名為姓名的屬性，其類型為字串。［方法］（Methods）方法表示類別可以執行的操作或行為，在非物件導向的程式中被稱為「函數」或「函式」。通常以 &amp;ldquo;名稱(參數清單)：傳回值類型&amp;rdquo; 的形式表示，例如，setName(name:String): void 表示一個名為設定姓名的方法，它接受一個字串做為參數，並不傳回任何值。［關聯］（Association）關聯用來表示類別之間的連接或關係。它用一條直線連接兩個類別，可能伴隨著空心箭頭，實心箭頭、圓形箭頭 &amp;hellip;等不同種類的箭頭，指向關聯的方向，不同種的箭頭則代表了不同種類的關聯方式。［繼承］（Inheritance）繼承是一種特殊的關聯方式，用來表示一個類別（子類別）繼承另一個類別（父類別）的屬性和方法，它通常以「一個空心箭頭指向父類別」的方式呈現。［介面］（Interface）介面是一個特定的方法集合，不帶有方法的實作細節。介面通常以帶有小半圓的矩形框表示，其中小半圓的一端連接到實現該介面的類別。［抽象類別］（Abstract Class）抽象類別是一個不能實例化的類別，通常用於定義一些通用的成員變數和方法，並要求子類別實現該抽象類別中的一些方法，它通常以斜體字表示。［依賴］（Dependency）依賴表示一個類別（或物件）依賴另一個類別。它通常以帶有箭頭的虛線表示，箭頭指向被依賴的類別。
對於程式設計師來說，類圖的主要目的是可視化系統中類別之間的結構和關係，以便開發人員和設計師更好地理解和設計軟件系統。它可以帶來類別結構可視化、類別關係呈現、設計規劃和模型驗證、易於生成程式碼、和便於文檔化與溝通 &amp;hellip;等，在軟體設計的過程中，可以起到不小的作用。
程式碼/圖形範例 類別 在物件導向程式設計中，「類別」通常是構成程式的一個重要的、不可或缺的元件（甚至對 Java 來說，所有的程式都是類別和物件就是了），因此如果要說明 UML 的畫法，第一個就介紹「類別」的畫法應該是再適合不過了，現在我們假設在一個「學生管理系統」中，有一個名為 Student 的類別，用 Java 來實作的話，程式如下所述：
// 類別 [學生] class Student { // 這個類別裡面目前還沒有任何東西 } 畫成 UML 圖，則會像是下面的這個樣子（很簡單，就是一個三層的方框）：
classDiagram class Student 那如果系統中有很多類別呢？像是有 Student, Teacher, School, Subject&amp;hellip; 之類的？</description>
    </item>
    
    <item>
      <title>創建者模式</title>
      <link>https://fonu195713.github.io/docs/_trash/design_pattern/builder_pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/design_pattern/builder_pattern/</guid>
      <description>創建者模式#ChatGPT 的說明 創建者模式（Builder Pattern）是一種創建型設計模式，旨在透過將複雜物件的建置流程拆分為多個簡單物件的建置步驟，使得物件的建置流程更加靈活、可維護，同時提供更好的控制和自訂選項。創建者模式的主要想法是將一個複雜物件的建構與其表示分開。這使得客戶端程式碼可以更容易地配置和建立複雜對象，而無需了解對象的內部建置細節。創建者模式通常包括以下關鍵角色：［產品］（Product）：產品表示被建構的複雜物件。產品類別通常包含多個屬性或部分，這些部分的創建和組裝由創建者負責。［抽象創建者］（Abstract Builder）：抽象創建者定義了建構產品物件的抽象接口，包括各個部分的創建方法。抽象創建者通常包括一個獲取最終產品的方法。［具體創建者］（Concrete Builder）：具體創建者實現了「抽象創建者」的接口，負責構建產品的各個部分，同時提供了設置產品屬性的方法。每個特定創建者可以建立不同的產品變體。［指揮者］（Director）：指揮者負責依照客戶端的需求，按照一定順序呼叫特定創建者的方法來建構產品物件。指揮者不負責特定產品的創建，而是協調創建者完成建造。［客戶端］（Client）：客戶端程式碼透過指揮者來建立複雜對象，並可以根據需要選擇不同的特定創建者，來建構不同的產品變體。
創建者模式的主要優點包括：分離建造過程和表示，允許更容易建造不同的產品變體；提供了更好的控制和客製化選項，客戶端可以自訂產品的建置流程；支援逐步建構複雜對象，使得建置過程更加靈活；提高了程式碼的可維護性，將複雜建置過程封裝在特定創建者中，使得客戶端不需要知道具體的創建細節；創建者模式在需要建立具有多個配置選項或參數的複雜物件時非常有用，例如建立圖形使用者介面中的視窗、建立文件物件、建立複雜的資料結構等情況。它幫助管理和組織複雜物件的建置過程，使程式碼更具可讀性和可維護性。
簡單整理 問題描述：複雜物件往往由許多不同的必選/可選物件組成，使得建立起來非常複雜
解決方案：封裝一系列的變數和設置，令創建複雜物件不再麻煩
程式細節：參照下面的段落
UML 圖：
程式碼範例 所謂的複雜物件，在這邊指的是需要經由各個小物件進行合成（或聚合）之後，才可以被生成的物件。用現實生活來舉例的話，就像是一輛汽車（需要引擎、車輪、車殼、排氣管、油箱 &amp;hellip;等部件組成）一棟房子（需要大門、牆壁、屋頂、水電、床鋪、書櫃 &amp;hellip;等物件組成）或者是一台電腦（需要鍵盤、滑鼠、螢幕、主機板、CPU、記憶體、硬碟 &amp;hellip;等元件組成）。就拿電腦來舉例好了：假設我們在程式中需要模擬一台電腦被創建的過程，大概會像是下面的這個樣子：
class Main { public static void main(String args[]) { // 組成電腦的小物件們 MotherBoard motherBoard = new MotherBoard(); CPU cpu = new CPU(); Memory memory = new Memory(); Disk disk = new Disk(); Power power = new Power(); ComputerTower computerTower = new ComputerTower(motherBoard, cpu, memory, disk, power); Keyboard keyboard = new Keyboard(); Mouse mouse = new Mouse(); Monitor monitor = new Monitor(); // [電腦] 本身 Computer computer = new Computer(computerTower, keyboard, mouse, monitor); } } 接著我們繼續往下想：是全世界所有的電腦都不多不少，由這幾種元件所組成嗎？如果我今天只需要一台架站的伺服器電腦，那我是不是只需要主機就好？如果我今天是一個辦公室的文書機，我應該還要再加上一個印表機的連線吧？如果我今天是給阿公阿嬤用的電腦，他們會不會用到光碟機之類的元件？如果我今天是一個電競選手，是不是還需要 GPU 和幾個固態硬碟？如果我今天是一個實況主，那麼裝一個攝影機用來捕捉畫面應該很重要吧？如果&amp;hellip; 如果&amp;hellip; 如果&amp;hellip;。假設我們要把所有可能的狀況全部都定義出來的話，那麼 Computer 的程式很有可能會長得像是下面這個樣子：</description>
    </item>
    
    <item>
      <title>工廠方法模式</title>
      <link>https://fonu195713.github.io/docs/_trash/design_pattern/factory_method_pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/design_pattern/factory_method_pattern/</guid>
      <description>工廠方法模式#ChatGPT 的說明 工廠方法模式（Factory Method Pattern）是一種創建型設計模式，它提供了一種創建物件的介面，但允許子類別決定要實例化的類別。這種模式的核心思想是「將物件的創建過程延遲到子類別中去實現。」從而達到物件的 &amp;ldquo;創建&amp;rdquo; 與 &amp;ldquo;使用&amp;rdquo; 分離，使得系統更加靈活和可擴展。工廠方法模式的主要組成部分包括以下角色：［抽象工廠］（Abstract Factory）：抽象工廠定義了一個抽象的工廠介面，包含一個用於建立產品物件的抽象方法。通常情況下，抽象工廠中可能會包含多個建立產品的方法，每個方法用於建立不同類型的產品。［具體工廠］（Concrete Factory）：具體工廠是實現抽象工廠介面的類別，負責創建具體產品。每個具體工廠對應於一種具體產品（或一組相關的特定產品）。［抽象產品］（Abstract Product）：抽象產品定義一個抽象的產品介面，通常包含了產品的通用方法或通用屬性。［具體產品］（Concrete Product）：具體產品是實現抽象產品介面的具體類別，用以表示不同類型的產品。
工廠方法模式的關鍵點是「透過將物件的創建委託給子類的具體工廠來實現。」這樣客戶端程式碼不需要直接依賴特定的工廠類型，而只需要依賴抽象工廠和抽象產品介面。這種方式使得系統更容易擴展，可以輕鬆添加新的工廠類型或變體，而無需修改現有的客戶端程式碼。以下是工廠方法模式的一些優點：［可擴充性］：使用工廠方法模式，可以透過建立新的特定工廠類別，來新增新的產品類型，而不影響現有的程式碼。［封裝性］：客戶端程式碼與特定的工廠類別解耦，只依賴抽象工廠和抽象產品接口，隱藏了具體產品的實作細節。［靈活性］：不同的具體工廠可以選擇不同的產品實現方式，以適應不同的需求和不同的環境。
簡單整理 問題描述：使用唯一的 Factory 可能會使該類別變得龐大
解決方案：透過建立 AbstractFactory 類別，讓 Factory 變得更加靈活
程式細節：參照下面的段落
UML 圖：
程式碼範例 貼心提醒：建議先看過簡單工廠模式會比較好。
工廠方法模式，算是比簡單工廠模式再更複雜一點的程式。那也因為這個模式跟簡單工廠很類似，所以我們就用同樣的例子繼續做解釋：在簡單工廠模式中，我們假設正在製作一個「資料庫操作程式系統」，並且有著幾個比較重要的類別：分別是代表使用者的 User、代表資料庫的 Database、以及代表工廠的 QueryFactory。User 可以透過 Database 裡面的方法（通常為靜態？），進行像是 INSERT, SELECT ..等不同的資料庫操作，而 Database 在接收到 User 的 query 之後，會再轉手交給 QueryFactory 負責解析，而 factory 則會根據 query 的不同，回傳不同的結果。
class User { public QueryResult query(String query) { QueryResult queryResult = Database.getQueryResult(query); return queryResult; } } class Database { public static QueryResult query(String query) { QueryResult queryResult = QueryFactory.</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202401/20240123/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202401/20240123/</guid>
      <description>日記：2024/01/23#今天是住院的第 2 天，我打算從今天開始養成寫日記的習慣。
昨天是軍營表定的複診日期，我們早早就在轉診車前集合，準備去醫院看診。在集合之前同樣可以聽到值星班長大聲的斥喝與責罵，一想到他說的「我們之後會繼續加大力度盯著你們」心裡就湧起了一股噁心、想吐的感覺。在前往醫院的路上，班長發給了我們一人一張初診的基本資料表，我旁邊的鄰兵沒有帶到筆，所以我借了他一支。我們一路上幾乎沒有聊什麼天（他看起來也是比較不想說話的那種類型），所以我後來是一路睡到醫院的，中間沒跟任何人說過任何的話。
身心科的複診很順利，就結果而言，醫生判斷我有「具有憂鬱傾向的適應障礙症」我不知道那是什麼？但從字面上來看應該就是憂鬱 + 適應不良吧？看完複診期間，醫生說他可以在今天分配了一張院內的床位給我，但他的前提是：「分配床位需要家人的同意」，所以無可避免地，我還是需要打一通電話給我的父親。跟父親的溝通不算順利，基本上可以用「大吵一架」來形容，這應該是我在與家人的經驗當中，第一次那麼用力、那麼強烈、那麼明確地表達、傳遞、和執行自己的想法，但很明顯地，父親那邊還是把他的底線踩得很死（不要住院，再等一個禮拜懇親之後回家慢慢聊、慢慢談），是直到但輔導長後來將電話接手之後，父親才同意了我的住院事宜。雖然不知道他們說了什麼？但我毫不在意。
在那之後我的情緒逐漸緩和下來，主因是「不用再回到軍營了。」姑姑和妹妹也在我撥通電話給爸爸之後來到醫院這裡找我和關心我（應該是父親打電話給他們的）。那時候大概是跟父親吵架過後的 1-2 小時，我已經變回比較平常的我了，我大概跟她們說了不下 10 次的「對不起」吧？說實話，挺不好受的。此外因為住院的規定是「剛入院的 30 天內都必須要待在醫院裡。」所以過年期間我是不可以回家吃飯的。我應該讓阿公擔心了吧？過年不能回去，不知道他老人家會怎麼想呢？
出院的時間預計在 2 月底 3 月初左右，等回去之後再看看要怎麼辦吧？病院裡大家的人都很好，雖然不乏有比較難以相處的，但也在這裡結識了 3-5 個年紀相仿的朋友（幾乎都是軍人）。老實說，還是有點焦慮，但如同士官長在第一天說的：剛換環境總比較容易焦慮。這樣的狀況再之後會好上許多吧？希望在這裡可以讓我的心情和心態慢慢地倒回原來的正軌。
今天妹妹送來了水壺、書籍、和一些其他的生活用品。妹妹帶來的是勸學齋主的《紫微初階》、《傅佩榮解讀易經》、CEH 相關書籍、和一本我沒看過的小說——《祈念之樹》，從書本外殼的介紹來看，我猜應該是姑姑借給我的（因為我們家的人沒有人會看東野圭吾的書）。現在的我真的覺得好幸福，真的很感激他們為我所做的這一切，也很抱歉昨天失控的情緒給他們帶來了不少的麻煩。
也因為今天是第二天入院，加上昨天晚上入院的時間有點太晚了（大概在 5:10 左右？）。所以住院例行的也做了 X 光和心電圖檢查被調整到了今天才做，從跟這邊的病友聊天的過程可以得知：我們軍人待在這裡主要是需要完成一份「評估診斷」，然後再把這份評估讓院方和軍方決定我的況狀（是免役？還是停役？又或是重回軍營 &amp;hellip;等），診斷的第一步驟是需要完成一份心裡測驗（簡稱心測），那個測驗過幾天就會來了吧？不知道會有什麼樣的內容？</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202401/20240124/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202401/20240124/</guid>
      <description>日記：2024/01/24#今天是住院的第 3 天。
昨天晚上在寫完日記之後發生了一個意外的小插曲：有 2 個病友\(_{[1]}\)（A 和 B）差點打了起來。起因是因為 A 在看電視的時候一直在自言自語，B 覺得 A 有點吵，就請他安靜。但 A 覺得 B 的這一行為像是在攻擊他，所以就出言挑釁了一番。接著場面就火爆起來，一度還差點變成雙方互毆的局面，是護理站的護理人員即時近來調解，才將事情壓制下來的。
總之，因為這件事情，昨天睡前的心情大概只有 30~40 左右。然後焦慮的分數有 90+ 就是了，這邊三不五時就會有這樣的問題嗎？還是我之後都把自己關在房間裡面好了。今天晚上也看到我爸跟我媽了，雖然不能面對面地聊天（好像是非會客時間？），但還是可以看出他們臉上不安和焦躁的心情。沒想到當兵之後的第一次見面居然是以這樣的方式，雖然比預期的時間還要早（原本會面是在懇親的時候），但這樣想想也覺得挺可笑的（在精神病院裡面）。他們帶了一些吃的、喝的、和其他保暖衣物給我。已經記不清楚這是我入院之後，第幾次收到他們的關心了，心情真的舒坦了很多。
除此之外，今天也發生了幾個比較重要的事：首先是營長和輔導長有來會客。這輩子大概只有這一次可以跟營長坐同一桌聊天了吧？感覺真奇妙。其次是我在病院裡面換床位了。從原本的 48 床換到了現在的 22 床。換原因是因為這裡發生了類似流感的傳染疾病，醫院為了預防（和隔絕）病毒，所以就把 45~56 的床位都留給得到流感的那些人（目前大約 4-5 個，但因為是傳染初期，所以人數之後可能還會更多）。
第三個是我今天做了一次社工師的家庭訪問，過程大概花了 25 分鐘左右。雖然不是正式的心測，但這好像也是流程的一環？社工師問了一些家裡的情況、家庭成員、相處氣氛 &amp;hellip;等，她也幫我歸因了一些我會憂鬱 + 焦慮的因素，然後建議我在出院之後要怎麼面對、處理、和應對。最後，我今天也看了一本東野圭吾的《祈念之樹》，怎麼說呢 &amp;hellip;，一個頂尖的小說家真的好厲害 &amp;hellip;，能以清晰精練的文字描繪豐富的人物、事件、和場景 &amp;hellip;，這就是我最最追求的其中一條道路的盡頭吧？雖然好遠好遠。但又讓人好嚮往、好期待。
——生活正在慢慢回到正軌，無論是身體、還是心裡。但還不能鬆懈，要好好注意，好好維持。
1：柏豪跟秉霖#</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202401/20240125/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202401/20240125/</guid>
      <description>日記：2024/01/25#今天是住院的第 4 天。
今天早上做完心測了！跟昨天社工師的家訪類似，心理師問了很多跟家庭相關、工作相關、和壓力相關的問題。不知道這 2 次的會談有沒有什麼關聯？因為從心理師的問題來看，感覺她事先沒有和社工師有對我的狀況進行過交流。但心理師問的問題和社工師明顯不同：社工師問的是「我」與「家人」之間的相處情況與氛圍；但心理師著重的則是「我」與「環境」的相處，以及這些環境帶給我的「心裡看法」。
除此之外，就像昨天所說的：今天的隔離人數相較昨天又更多了，大約有 \(\frac{1}{4} \sim \frac{1}{3}\)的病友都被送進隔離區。而且我在剛剛才知道，他們得的其實不是流感，而是 covid，所以接下來我們每天都要做一次確診的快篩。同時，也因為待在外面的人數變少了，所以自己與自己獨處的時間就多了起來：今天曬了大約半小時的太陽，或許是錯覺？但吸收陽光之後心情有感覺比較「正面」一點。然後，我自己也花時間重看了一遍《紫微初階》這本書，目前進入到「格局」的部分。雖然不能說沒有收穫，但畢竟大多都還是以前就學過的東西，所以整體而言還是複習成分居多。
稍晚應該會回想一下前兩天家訪跟心測的內容吧？無論是我、家庭裡的大家，真的各自都有辛苦的地方呢 &amp;hellip;。「搬出去真的是個好決定嗎？」老實說社工師的說法有稍微說服到我原本的決定。今天跟心測的姊姊聊了一下之後，她也同樣再提醒了一件在入伍之前，整骨的哥哥就有提到的事：我一部份的個性其實跟「我很不喜歡的個性」重疊了。這當然不是件好事，也得好好思考與模擬要怎麼改善才行？
等等晚上要打 2 通電話：1 通是固定 19:40 的回家報平安，另外一通是跟輔導長說「我的心測已經完成」的事。根據大家以往的經驗，一般心測完 2~3 週後結果就會下來了。但我因為過年的原因（放了大約一個禮拜的年假），所以我可能還會再多一陣子，也因此 &amp;hellip;我還要再等 30-35 天左右吧？這樣算下來，大約 2/28 前後可以完成。但真的能夠那麼順利嗎？結果真的不會是「重回軍營」嗎？天知道～總之只能先等待了。</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202401/20240126/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202401/20240126/</guid>
      <description>日記：2024/01/26#入院的第 5 天，目前一切安好。
今天沒什麼特別的事情，加上已經習慣裡面的生活了，所以今天讀書的時間特別多。大概在下午 3 點左右，我《紫微初階》看完了——準確來說，是把「格局」和「五行局」這兩個章節仔細的讀完了。我得收回昨天說過的話（整體而言還是複習居多～），老實說 &amp;hellip;看完之後的收穫是挺多的。原以為大部分都是早就知道的內容，但還是從中挖到了一些學問：像五行局的命名邏輯、格局的細緻分析 &amp;hellip;等。尤其五行局的部分：利用宮位的納音進行吉凶的論斷算是一個很有趣的技巧，也有點飛星的味道在裡面，沒意外之後應該會用這種方式論命看看（總覺得離我原本學的飛星越來越遠了 &amp;hellip;）。
也因為《紫微初階》已經閱畢，加上目前手中僅有的 4 本書裡面，《祈念之樹》已經在前天看完了，《紫微初階》在剛剛也結束了，CEH 的內容需要實際操作才可以達到書本的需求（但裡面用不了電腦）；所以終於要進到《易經》的解讀和分析了 &amp;hellip;。可以很自信地說，我對於解釋爻辭的易經占卜幾乎是完全沒有涉獵（我比較擅長的是京房易的占卜邏輯）。但毫無疑問，傅教授的《解讀易經》一定是一本好書，目前計畫分 32 天把所有的內容看完（易經共有 64 卦，以一天 2 卦的進度來算）。理論上按照這樣的進度來執行，出院之前就可以完成。但內容能不能看懂、看透徹就又是另一回事了。希望可以跟最剛開始紫微一樣，有個雖然辛苦、但跟充實又很快樂的過程。</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202401/20240127/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202401/20240127/</guid>
      <description>日記：2024/01/27#今天是入院的第 6 天，用軍營的時程表來看的話，今天是部隊的懇親日。
要說我不羨慕嘛 &amp;hellip;多少還是有一點，畢竟入院的生活是沒有放假的，就連年假也不例外——誠如23 號的日記所言：除非你在過年之前就已經先在裡面待滿至少 30 天，才有出外的機會，不然剛進來的 30 是不可以離開醫院的。但比起「羨慕」，我更多的心情其實是「舒坦」。入院算是在我衡量了 2 邊的利弊之後，&amp;ldquo;選擇&amp;rdquo; 過後的結果：用我當兵裡面 1~2 個月的所有假期，去交換早日離開新訓的環境，直到現在我仍不後悔。
即使在這裡同樣會被固定作息；即使這裡除了廁所之外，其他地方都有 24 小時全方位無死角的監視器；即使這裡不會給你任何（哪怕是 1 秒）的手機時間、3 C 用品完全禁止使用：即使三不五時身邊就會有人突然發狂、當機、或表現出怪異的舉止。但我仍為我的選擇不感到後悔（包含複診那天跟醫生說出我的真實想法、甚至跟爸爸在電話裡大吵一架）就像裕宏班長說的：「好好思考自己的未來要選擇什麼？要拿著什麼？要丟掉什麼？」我思考了，也選擇了，現在只是在這裡面對、享受、和承受選擇過後的結果而已。
除此之外，今天比較重要的事情有 2 個：第一個是《易經》真的、真的、真的好難讀 &amp;hellip;，看了一整天才勉強看了大約 7 個爻辭和概述。第二個則是明儒跟我說他要把我培養成他在這裡的下一個接班人（就是最熟悉院內所有軍隊流程的軍籍病友），所以他在之後會開始丟一些院內相關的課題給我。但老實說我對於「成為接班人」的意願並不是很高，我也還沒準備好要面對這件事，也不知道該從何開始？但換個方式想：在入院之前，我也早就懶散地度過很多年了，巳宮祿存天府無煞的大運讓我過得太～舒服了，或宇也是因為這個原因，才讓我現在沒辦法適應軍中的生活吧？無論如何，從現在開始練習繃緊神經也好，不要像是當兵那樣一下子把壓力 all in 到身上的角度，而是慢慢地、慢慢地累積壓力、扛著壓力往前走，或許才是比較適合我的方式吧？畢竟如果連這都想不練習、也沒有練習的意願的話，那麼我下一步「月同遇煞」的大運又該怎麼過呢？</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202401/20240128/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202401/20240128/</guid>
      <description>日記：2024/01/28#今天是入院的第 7 天，如果用我現在在寫日記的這個時間（18:55）來算，我入院的時數已經超過我待在軍營裡的時數了。直到現在還是有點難以感覺到這個時間上的變化，這就是「緊繃」跟「鬆懈」之後的時間差距嗎？時間真的過得好快啊 &amp;hellip;，不知道營區的大家現在過得怎麼樣呢？如果是放 3 天的懇親假倒還好，但如果懇親只有放六日的話 &amp;hellip;，希望不要有人逾假未歸，不然難以想像他們會面對到怎麼樣的麻煩。
今天有發生幾件有趣的事情：首先是我進行了第一次的會客，來的人是我媽和我妹 2 人。雖然會客的時間只有 15 分鐘，但還是聊了不少的事情。她們也趁著這次來會客帶了很～多很多的書本過來，其中有 2 本跟紫微有關的書籍（《紫微進階》和《紫微高階 1》），這兩本配合《易經》會是我之後幾天的閱讀主力，可以感覺到在這裡的閱讀量應該能夠累積不少起來，畢竟包含院內本身提供的書籍在內，才過不到一個禮拜，我就已經看完 3-4 本書了。
其次是明儒快篩呈陰性，所以他從隔離的區域出來了。他也趁著這個解隔離的機會跟我說了完整的院內流程：包含社工家訪、心測、心理師撰寫心測報告、心理師把報告寄件給精神科主治醫師，主治醫師撰寫病人的病情診斷、然後將診斷結果寄回原軍營，讓原軍營做最後裁定（回營、驗退、或因病停訓）。算是一個挺正常，但看起來又有一點點長的行政流程（難怪他們會說需要大約一個月左右的時間）。
最後是今天又認識了一個新的朋友——冠至（外號叫蔡蔡）。他是 186 梯次的二兵（我是 191 梯），在入院之前一直都待在精北。有重度憂鬱的病史、跟超過一次的自殘與自殺未遂的紀錄。從跟他的對話中我又再一次的感受到了「重度憂鬱不一定是從外表就能夠看出來的。」的這件事。除此之外，名儒也跟我說：從今晚（或明天）開始，要來整理一下環境資訊了——包含記得護理師、保全、與病友的人名、個性、習慣。還有記得其他東西（例如遊樂器材借閱時間、麻將借閱時間、曬衣場跟熱水的開放時間 &amp;hellip;等）的相關細節。就像之前跟自己說的：也要開始練習把手邊的事情、未來的事情好好地整理和規劃一番了。入院歸入院，該鞭策自己的還是要鞭策，不然就只是在懶散度日而已，對自己不會有正向幫助的。</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202401/20240129/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202401/20240129/</guid>
      <description>日記：2024/01/29#（1/30 10:20 補寫）#昨天忘記寫日記了！趁著現在早上還有一點記憶趕快補寫一下。
昨天基本上沒有發生什麼太大的事。沒有紛爭、沒人吵架、也沒有發生鬥毆，算是相對少見的和平一天。前兩天認識了冠至，昨天則多記了兩個朋友的名字——分別是秉霖跟仲敏。他們都是昨晚 &amp;ldquo;算命大集合&amp;rdquo; 的時候我趁機記起來的。我們昨晚在我的房間開了一個小小的 party，起因是因為我窩在床上看我的《紫微進階》，然後明儒看到之後就問我會不會算命（因為看到我一直在看那種類型的書）。我說會，也幫他算了一下，他覺得挺準的，就把其他人給拉過來了。整體而言， party 的氛圍滿好的，如果之後能夠維持昨晚的熱情和心態認識更多的人就更好了！
此外，昨天早上也被保全給小唸了一下，原因是我洗澡的時間太早了：因為以前的固定生活，我習慣在 5:40 ~ 5:50 之間起床，然後洗澡（順便刷牙）。但因為這裡表訂的開燈時間（也就是起床時間）是 6:35，加上浴室緊鄰著其他人的寢室，可能因為這樣就被人給投訴了吧？看來之後還是得把洗澡的時間調整成下午或晚上才可以了（但不考慮睡前的 60-30 分鐘，因為那時候搶浴室的情況會最嚴重）。最後一間值得分享的事情是：我把《紫微進階》給全部看完了！準確來說是 &amp;ldquo;星耀篇&amp;rdquo;、&amp;ldquo;四化篇&amp;rdquo; 這兩個篇章。最前面的 &amp;ldquo;快速排盤&amp;rdquo; 對我沒有太大幫助所以我就直接跳過了；然後最後面的 &amp;ldquo;名人盤例&amp;rdquo; 因為我對那裡面大多數的人都不熟，加上沒有比較細節的大事年表，所以目前的參考價值不大也同樣跳過了。再來就剩下《高階 1》跟《易經》了，加油！</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202401/20240130/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202401/20240130/</guid>
      <description>日記：2024/01/30#第 9 天，今天的太陽依舊從東邊升起。
仲敏今天下午離開了，算是毫無徵兆的那種，早上起床量血壓的時候，護理站的姊姊突然跟他說他今天可以出院，要離開，然後他就去整理行李了。明儒之前也有說過：「志願役的離院時間算是比較不穩定和突然的。」我想這又是其中的一個例子吧？總得有點尷尬，我還來不及跟他說「那天晚上幫他排的命盤是錯的。」他就走了 &amp;hellip;看來這就是緣分吧？或許我不該在這件事情上面太過執著（雖然對我來說有點難）。
今天同樣也做了幾件比較重要的事：首先是我確定了「我在過年的期間（小年夜 ~ 大年初五），連 4 個小時的『暫時外出』都不可以。」這也意味著今年會是我從小到大以來，第一次在小年夜的晚上沒有待在家裡吃飯，不知道他們會怎麼想呢 &amp;hellip;。有點小好奇？之後得再多加把勁，讓第二次的機會降到很低很低（甚至是 0）才行。其次是過年期間的會客仍然開放，所以他們還是可以來這裡看我 15 分鐘，這對他們來說應該是個好消息。
然後我今天問到家訪的社工師的名字了！會問社工師的名字是因為我爸媽有點在意社工師對我這個狀況的看法？聽我爸說社工師好像有特別打電話給他，問他我之前說的那些東西是不是真的？雖然沒有問到確切的聯絡方式，但有了社工師的名字之後，他們應該就好聯繫許多了吧。不知道他們會問她什麼問題？希望不要一直黏著她問東問西，造成別人的困擾才好 &amp;hellip;。
再來，算命的「行程」在今天仍然持續。自從名如他們發現到我會算命之後，我一直都會保持 1~2 天幫 1~2 個人算命的節奏（而作為算命的交換，他們要把當天的夜點給我）。今天的客戶是冠至和金城：冠至的沒什麼特別的地方？是命宮紫府在寅的格局，雖然煞星（包含陰煞、截空）的位置不是很好，但他重度憂鬱的狀況倒沒有很明顯地看出來？可能是我漏看、也可能是功力不夠、再不然的話 &amp;hellip;就是業力引爆在他自己身上了吧；再來是金城的命盤，金城的盤是命宮天梁在亥，三方四正基本上還滿漂亮的，一些懂得紫微斗數的老前輩們圍著那張盤聊了很久，大家基本上都沒什麼負評。至於為什麼他會進來住院嘛 &amp;hellip;推測是因為他剛好連續走了幾年很爛的流年 + 大運才導致的。</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202401/20240131/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202401/20240131/</guid>
      <description>日記：2024/01/31#1 月的最後一天，也是來到這裡的第 10 天。
扣掉時不時就會有人互罵然後嘗試打起來（或者真的打起來）這點，習慣這裡的生活之後，就開始有點養老院的感覺飄出來了。這 2~3 天陸陸續續出院了很多人，明儒在今天下午也出院了。同時因為接近過年的關係（現在進來的病友會跟我們一樣不可以放年假，要在裡面過年）自從程育進來之後（他 23 入院，我 22 入院），院內就再也沒有新人了。現在的人數相比第一天我進來的時候少了約莫 10 左右，這也算是繼 &amp;ldquo;確診事件&amp;rdquo; 之後，第 2 次感受到院內的冷清。
程育今天去做了心測，所以從今天算起，最慢 30-35 天他就可以出院了，但他的狀況時好時壞，總有些讓人摸不著頭緒？希望他能順利度過院內剩下的時間。今天也發現了新的休閒活動 （其實是之前下午都關在房間看書，沒有注意到）。在下午短短 3~4 個小時裡面也跟大家打了麻將、下西洋棋、象棋、暗棋、和五子棋。這些活動算是這邊少數的休閒之一（其餘的應該只有看電視跟自主運動了？）
至於閱讀的進度 &amp;hellip;老實說不是很理想：《高階》目前只看完紫微星系的部分（前面 6 個章節），晚一點打算補看天府、太陰、和貪狼（7-9 章）的內容，預計後天或大後天要把這本書給看完，而《易經》則是完全沒有進度（半放棄狀態）。但與之相對，這幾天我起盤的速度快了許多，除了原本的紫殺之外，現在的我也能背出紫破和紫微獨坐的盤型了，5 組的暗合星耀則是已經記起來了，出院之前沒意外的話，能夠把這些東西完全記熟。
最後是小小的自我檢討：今天中午打了一通電話給我妹，有試著想要隨便聊點什麼，稍微練習一下自己的口條。但可能是真的沒有什麼話題吧？也可能是因為我太久沒有跟別人聊天的經驗了。我妹接起來之後我完全不知道要說什麼。再加上她的語調聽起來挺累的，我也不想要一直吵她，所以我只是匆忙說個幾句就把電話給掛掉了，超級爛的，哈哈哈！以後得多多練習跟人說話才行！</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202402/20240201/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202402/20240201/</guid>
      <description>日記：2024/02/01#終於來到了 2 月的第 1 天～
或許是待在這邊太無聊的關係吧？「韓國瑜當上立法院長」這件事竟然可以引起我的興趣！？先不論我是高興還是難過，但有點難以想像我竟然會因為政治的事情而有這麼明顯的情緒起伏。畢竟在住院期間，每天不是躺床，就是走路、看書，偶爾看看電視，看看籃球，然後晚上打打牌就睡覺。唯一能夠接收到外界訊息的管道就只有 3 餐時間的新聞台、以及時有時無的每日報紙（完全無 3C、無電子的生活）。但也多虧這樣的生活，讓我慢慢養成了「閱讀」的好習慣。不只是「書籍」的閱讀，我也開始比之前更加用心、更加仔細地「閱讀」身邊的一些人事物了！（病友的心理狀況拉、對話內容啦、或者是觀察鳥、觀察花、觀察草&amp;hellip;之類的）不知道在這之後能不能「讀」出什麼有趣的東西呢？真是令人期待。
此外，今天輔導長又來看我了。他說今天會過來的主要原因，是把我們連上的另外一個人給帶來 803（我猜是 17 號？）所以就順便過來看看我，問我過得如何？有沒有需要幫忙的部份這樣。雖然這些對話也許只是輔導長的例行公事？但這多少也讓我對他們的印象變得更加和緩一點。其實我自己心裡也很清楚不論是輔導長，還是班長、士官長、和連長 &amp;hellip;等都是好人。只是我真的無法適應那裡的生活，所以現在才會待在這裡。
然後是紫微斗數的部分：原本預計明天（或慢一點後天）會看完的《紫微高階 1》在今天全部看完了。昨天後來沒有持續看下去（因為後來太累了，在寫完日記之後只去廣場散個步、吃個藥、就直接回去躺床了），但今天一口氣把包含輔星在內的後續章節全部都給讀完了（7-32 章）。《高階 1》的感想跟前 2 本差不多：雖然大部分的內容都已經知道了，但同樣還是有從中學到一點新的東西：像是南派裡 6 線（活動線、成就線、行動線、桃花線、享受線、和光明線）的名稱由來和相關作用、同干同氣的細節說法、以及以六親立太極的新詮釋 &amp;hellip;等，都是之前沒有自細發現過的東西。
最後是最重要的事䞍：之前我妹他們來會客的時候，幫我買的 2 張電話卡消失了！不知道是消失在護理站裡面，還是她們本來就沒有把電話卡交給護理站的姊姊們？如果這件事是發生在一個月前，我可能會以「就這樣算了吧～」來為這起事件劃上句點。但此刻的我應該會找時間跟我爸媽抱怨一下，表達一下自己覺得比較不滿意或疑惑的情緒。畢竟偶爾讓人覺得「我有時候也有點麻煩」好像也不是什麼壞事？</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202402/20240202/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202402/20240202/</guid>
      <description>日記：2024/02/02#程育今天被帶進保護室了。
保護室顧名思義，就是會被醫生和護士們重點「保護」的一個區域，通常要在院內做出比較明顯、比較重大的危險行為（像是暴力、自殘、或其他容易對他人產生潛在危害的行徑）才會被關進去。但程育的狀況有點特別 &amp;hellip;別說是暴力了。在他入院的這些日子以來，我甚至年他一次把手高舉過肩膀都沒看過。他會被「保護」的原因主要是由於它身體內蛋白質、脂質、碳水化合物及微量元素的不足，導致身體無法維持正常的細胞結構和功能，引發體內多種生物化學過程的不平衡，使得機能組織、器官或整體系統的異常功能，影響人體的運作——簡單來說就是營養不良。
包含今天在內，他好像已經在院內昏倒過 4 次了：第一次是在複診的診間、第二次是在入院之前的會客室安檢、第三次是心測的測驗途中、第四次（也就是最後一次）則是今天中午服藥之後。他因為早上的血壓數值比較低，所以妹護理站的姊姊要求中午吃完飯之後再去量一次血壓（大概是 12:30 左右去），那時候我沒有在第一現場，因為 12:00 ~ 13:30 一般是我的午休時間，所以那時候我正睡得香甜。
從事後其他人的說法來看，程育是在 12:30 量完血壓之後，一出護理站的門，就直接暈倒在門口了（頭好像還有稍微撞到地板？）。我有點擔心他，多少也對這件事情有點自責（他的班長曾託付我要好好照顧他，因為我是他唯一年紀相仿的同房室友）。但就像阿政和顏勤說的一樣：他其實沒有很努力地在改變他自己，所以我們做得越多，反倒愈加冗余。
另外昨天的「電話卡事件」大致已經落幕了。最後我們是以「我家人在會客室的時候，以為有把電話卡轉交給護理人員，但其實他們沒有轉交」作為事件的偵查結果（爻辭：天水訟、九二）。爸爸也在今天直接買了 3 張新的電話卡過來，並跟我一起當面點交，確定卡片有被收進我的位置之後才離開。此外，因為昨天已經看完《紫微高階》的原因，今天也開始著手翻閱我一直都很不想面對的《易經》了。我現在已經放棄在出院前把全書看懂了，只求能夠把他先大致掃過、看完一輪。但即使如此，進度同樣非常緩慢，只進行到了\(\frac{13}{64}\)的地方，不知道什麼時候才能「看」完。</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202402/20240203/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202402/20240203/</guid>
      <description>日記：2024/02/03#今天也是平凡的一天，所以我們來聊聊別的東西：「夢」。
來這裡也快兩個禮拜了（第 13 天），如果把午覺也一起算上去的話，在這邊睡著的次數大概也已經超過 20 次了吧？但很意外地，在這超過 20 次的夢境裡面，大約只有不超過 5 次的好夢的印象。剩下的夢境除了今天早上的內容之外（阿嬤找我求救，我在趕到之前聽到碗盤摔到地上的聲音，然後驚醒），其餘的夢境無一例外，全部都是當兵那短短 6 天裡面發生的事情，或者是相同的人（我、鄰兵、班長與其他幹部們）因為類似的事情，產生類似的結果。
說得簡單一點：在那些「惡夢」裡面，基本上我不是在被罵、就是在準備被罵的路上。被罵的原因各種各樣：但凡是早起、集合、內務、行軍、吃飯、拿東西、唱歌、司令台點名 &amp;hellip;等，甚至還有幾次是睡到一半被嚇醒，睡回去之後繼續被罵的經驗。現在（寫日記的當下）想想：會不會我真的對那個禮拜的生活，累積了很多很多的壓力跟負面想法啊？至少我的潛意識應該是這麼認為的。
即使現在的生活大致都很放鬆，也還是不能撫平那時候隨時繃緊的神經跟意識嗎？或者是我還需要再多一點的時間呢？我也不確定。但在我理智上線的此時此刻，如果你問我「要不要回去軍中繼續受訓」，我還是會回答同樣的那一句話：「除非有人能跟我解釋我所有ㄉㄚ動作裡面，背後的所有動機與原因，不然我寧願現在找一個方法逃兵，或者是捐光我身上所有的錢，然後去死一死。」
在當兵以前，我是一個相信「凡事都會雨過天晴」的那種人，但捏許正事因為這樣的想法，神明（或某種佛祖上帝之類的人）才會讓我體驗了一次「我無法單以『凡事都會雨過天晴』的心態來面對跟處理的狀況。」在當兵之後，我的態度很明顯地改變了，現在的我是這麼認為的：「不果你不喜歡某件事情，那你就要直接拒絕；如果你拒絕不了，那就要想辦法改變；如果你改變不了，那請盡可能地逃走；但如果你連『逃走』這件事情都做不到，那就去死一死吧。」</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202402/20240204/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202402/20240204/</guid>
      <description>日記：2024/02/04#今天我入院以後的第 14 天。也是我入院之後第 2 次會客的日子——這次來的人是我妹、和我的二表哥。
很意外地，他們帶來的東西跟我之前打電話報平安時跟他們說的東西一模一樣，沒有少任何一樣，而且也沒有多出任何一樣。這滿少見的？不知道他們的心態是不是有發生了什麼變化？有點令人好奇。此外，從我妹的談話裡，可以感受到從我住院以後，家裡的氛圍一直都很低迷（甚至有緩慢下降的情況），這同樣也不是件好事，等等 19:40 打電話的時候再跟他們多聊幾句好了。
今天我把《易經》看完了。用「看」這個詞有點不精確，精確一點應該是「掃視」完才對。至於心得 &amp;hellip;，以我這幾天翻閱易經的經驗來看，我覺得要把那本書讀熟、讀懂，認真來說是有可能辦到的，但我覺得它的機會成很有點太高了——如果要把目標定成「在出院前讀懂《易經》」的話，那就會花上大量我平常自主運動、跟別人互動、聊天、下棋、和深度對談的時間。所以我的策略改成了「先掃視一次，大致了解每一個卦象所代表的背景和意涵，等之後有空再慢慢把它讀懂」上面。
然後是之後的讀書時間，這次會客他們帶來的書本共有 4 本，分別是《紫微高階 2》《紫微高階 3》《紫微高階 4》和《Linux 鳥窠的私房菜 - 第 2 版》，相對於全力沈潛在《易經》的學海裡面，我會則傾向把今天帶來的這幾本書分別讀完，效益應該會比較好。
最後是今天的另一項 &amp;hellip;軼事？聽表哥說，我媽好像一直以來對於我病情的理解都是「在大部分的時候面無表情，沒有正常的回話能力，基本上只會『嗯』『嗯』『嗯』的回答而已。」痾 &amp;hellip;我覺得這個等等打電話應該也可以好好澄清一下，我平常打電話的回應應該超級正常的吧？還是只有我這麼認為？其他人都覺得我變得很沒有回話能力了。</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202402/20240205/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202402/20240205/</guid>
      <description>日記：2024/02/05#入院第 15 天，因為院內來了 3 個新的病友\(_{[1]}\)，其中 2 個和我一樣是義務役的軍人，另外一個則是睡在我隔壁的一個阿伯。還沒認識這 3 個人，所以今天還沒有辦法寫太多關於他們的事情，之後再花時間慢慢瞭解吧！今天開始讀第 2 本紫微高階的書籍，雖然只是閱讀的第一天而已，但已經看完了大約\(\frac{1}{3}\)左右，預計順利的話，明天就可以把這本看完了。
或許是時隔多年才出版的原因吧？這本書（《紫微高階 2》）相較於前面 3 本紫微斗數的書籍，哲學跟說教的比重佔了很多。但這也不是說它的價值就變得很低，目前看下來還是有可以學習跟注意的東西。今天也聽冠至說了很多他在入院和入伍之前的事情，從他的內容來看，可以感受到我們兩個平常的生活圈真的差很多（他算是在外面一個蠻有地位的 8+9）。也因為這個原因，我打算在這裡跟至少 10 個左右的病友進行比較深層、比較內心的聊天或談話，冠至就當作這個計畫的第 0.5 個吧！可以的話，接下來的 9.5 個人中也希望有一些比較中年或比較年長的病友（雖然他們幾乎都只說台語，然後我台語超級爛就是了 &amp;hellip;）。
另外，因為放完年假的關係， OT(Occupational Therapy) 的姊姊們久違地出現了！今天早上 10 點第一次體驗了採買的活動，還滿有趣的，在不超過 400 元的前提下，盡可能買到最多自己想要的東西，唯一比較可惜的地方是：或許是我已經離之前的「普通」生活有點距離了？在的我對於零食完全沒有興趣、飲品也只有水、波蜜果菜汁、和麥香奶茶（裡面不能喝）有興趣而已，所以我在這次的採買裡沒有買到任何東西，只是看著他們買著想要的東西而已，哈哈哈！
1：嘉祐、翔之、跟永清阿伯#</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202402/20240206/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202402/20240206/</guid>
      <description>日記：2024/02/06#過年的前 4 天。
今天院內離開了大約 10 人左右？包含阿政、顏勤、秉霖、耿顯 &amp;hellip;等，除了顏勤是放年假（過年後會回來）之外，其他人都是出院，幾乎所有在這邊認識的人都走了呢 &amp;hellip;。也因為院內空了很多很多的位置，所以院方就把平常安置在 2 樓的其他病友們全部轉來 1 樓了（為了方便管理）。用總數來看的話， 1 樓的總人數（相對昨天）反而是比較多的，這也代表了平常 2 樓也有至少 10 位以上的病友在居住。此外，因為 2 樓的病友相對於 1 樓來說，基本都是比較慢性、或比較嚴重的精神病患，所以這裡也變得更像大家世俗中所想像的 &amp;ldquo;精神病院&amp;rdquo; 了，哈哈哈！
今天國軍也為還留在院內的所有軍籍病友發放了一人 1000 元的過年紅包，是以 &amp;ldquo;住院慰問金&amp;rdquo; 的名義發送的，但紅包無論是何種軍階都是固定 1000 緣就是了，所以對於金城來說應該算是比較小的損失（他是上尉）。今天也見到在軍中同連的 17 號了！原來他之前都住在 2 樓嗎！看來他真的過得比較辛苦呢 &amp;hellip;。雖然還沒跟他搭話，但從遠處觀察的結果來看，他焦慮、活動力低下、跟憂鬱的氛圍還是挺明顯的，希望他成早日擺脫這種壓力所帶來的痛苦，慢慢讓自己放開一點。
說到放開，程育今天從保護室裡放出來了！自從他出來跟我打招呼之後，他感覺就像是變了一個人似的？從原本一天說不到幾個字的狀態，到現在看到人就打招呼，順便聊個 2-3 句，管他認不認識眼前的那個人。他之前應該真的是營養不良吧？然後現在比較像是營養補太多 &amp;hellip;。現在的他真變得超級熱情，老實說我有一點招架不住（哈哈 &amp;hellip;），但也不能否認：因為他那自來熟的個性（加上一定要把我拉在他身邊的個性），我也因此順勢認識了 2~3 個平常只會點個頭、說早安晚安的人。到今天為止，大概也過完在這裡近一半的天數了（一般的義務役軍人會抓 30-35 左右的天數）老實說這樣的日子也過得滿快的，有點擔心我想讀的書會不會讀不完？我看之後的幾天還是多加一點讀書的時間，拼拼進度好了！</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202402/20240207/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202402/20240207/</guid>
      <description>日記：2024/02/07#冠至今天也出院了。
昨天的 OT 活動時間廖醫師有來找我（廖醫師就是我的主治醫師，那個當初決定讓我入院的醫師），來做一些例行性的問診。我跟他說「心情方面目前沒有什麼問題，但生活上有個地方倒是挺困擾我的——睡在我左邊跟右邊的兩個阿伯打呼都超大聲的，讓我晚上很難入眠。」所以在經過一些跟廖醫生的討論之後，他從今天晚上會幫我加重肌肉鬆弛劑的藥效，並多補半顆輕型的安眠藥給我，希望會有效。
早上程育在聽到我跟廖醫師的談話之後，也在 OT 結束之後給了我一個耳塞讓我用，中午午睡的時候試用了一下，隔音效果的確滿好的，真感謝他。程育今天同樣也呈現一個很活潑、很好動的狀態，不過因為下午陸陸續續下了幾場大小不等的雨，所以我們能活動的空間就縮小了很多，也因為下雨的關係，院內的溫度低了許多，大部分的人都會在這時候選擇把自己關在自己的房間內，所以他不再能像之前一樣隨便走、隨便看到人、隨便打招呼了。
另外，因為今天是禮拜 3，所以今天早上的服藥時間（9:00）也會順便幫所有的病友紀錄體重。記得我入伍之前最後一次量是 70.2，然後 6 天後入院的量的體重是 63.6，到了今天（入院的第 17 天）體重已經慢慢回到 66.9 了！從復原的角度來看，應該還算可以～但從 BMI 的角度來看嘛 &amp;hellip;，好像快要超過標準的 18~24 了，可以的話希望出院之前不要再變胖更多（或胖的健康一點）不然之後健身就會很辛苦、很辛苦 &amp;hellip;。
最後！今天的 OT 活動是過年前的最後一次，是為期 1.5 小時（10:00 ~ 11:30）的卡拉 ok 歡唱。只能說這裡不愧是 &amp;ldquo;高齡化社會&amp;rdquo; 特別明顯的地方，幾乎所有他們唱的歌我都沒聽過（扣掉一首大家應該都比較熟的海波浪），我也跟金城和小 OT 炫耀證明我的歌喉，點了一首永邦的每次都想呼喊你的名字，只能說 &amp;hellip;久違的唱歌真的好爽（可以只唱 1, 2 首就聽別人唱歌更爽），希望以後多一點這樣的唱歌活動！</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202402/20240208/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202402/20240208/</guid>
      <description>日記：2024/02/08#來到這裡的第 18 天。
你天天氣明顯轉涼了，早上出房門之後，皮膚的體感溫度大概只有 19 度上下吧？（昨天至少有 23, 24）如果把風的因素加上來的話，體感大概可以再扣個 3~5 度左右。不知道是因為加藥的關係？還是我的身體一下子轉太涼了？今天一整天感覺都懶懶的，所以早上刷牙漱口之後，就決定給自己放半天的假——吃完藥（8:10）之後，就回被窩睡到中餐（11:30）再起來。算是打破了之前跟自己說「早上起床後，在中午吃飯之前都不可以回去休息」的規定，所以為了找個合理的藉口理由說服自己，我的說法就是：「都連續工作這麼久了，讓自己放個半天假應該不過分吧？」算是小小的醜 1，可以的話，希望之後自己可以盡力拉長發生醜 2 醜 3 的時間不要太快（或甚至不要有～）。
今天午睡（13:30）過後，護理站也辦了一個健走活動——就是把全體病友從被窩中拉出來，大家一起繞著廣場走 30 分鐘。這個類似 ant mill 的活動也讓我了解到「我真的是一個走路走得超•級•慢的人。」就連 50-60 歲左右的阿伯、阿公走路都比我還快 xD！看來我抽到陸軍是比較不適合的，我應該比較適合空軍才對（空軍行軍走路速度超慢）。在健走活動結束之後，護理站的姊姊們有給我們每個有參加活動的人一人一瓶波蜜果菜汁（雖然沒有麥香或阿薩姆奶茶，但還是超幸福！！），也意外發現波蜜上面寫的是 100% 的濃縮原汁，所以這是代表它比較健康的意思嗎？如果是的話以後改喝波蜜當習慣好了。</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202402/20240209/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202402/20240209/</guid>
      <description>日記：2024/02/09#今天是入院的第 19 天，也是農曆的除夕。
按照往常「過年會放鞭炮」的慣例習俗，大概可以預見睡不著的晚上了，希望程育給的耳塞除了可以抵禦左右兩邊的打呼聲之外，也可以抵擋今天晚上的鞭炮攻勢。今天早上幫漢哲算了一次命，過程中意外被護理站的姊姊給發現了。等漢哲的算命結束之後 1-2 分鐘，姊姊就偷偷跑過來問我有沒有空？然後就把我帶進護理站幫他們算命了（哈哈）！前前後後看了 4-6 張命盤，得到的感想是——命盤的基本格局真的有差。
在院內的病友們，無論是明儒、秉霖、仲敏、漢哲、或其他人 &amp;hellip;等，大致上都是在排完盤之後，3-5 秒內可以馬上看出某個（或某些）宮位特別不好的（但金城不算，他是在大運不好的時候，又剛好連續走了 2,3 年爛到炸開的流年運）。但姊姊們（或他們的小孩們）就很難有這種「馬上看到不好的地方」的現象，所以他們的盤相對於住在院內的病友來說，論命的 &amp;ldquo;驚奇感&amp;rdquo; 相對就沒有那麼強烈了，對自己而言算是小小的可惜（但對他們而言這是很好的事情～）。
然後我今天也看完勸學齋主的《紫微高階 3》了，而《高階 4》目前只看完引言和目錄，同樣也可以感覺到它們都是還不錯的書～真是期待，哈哈！除此之外，今天也有年前的加菜：分別是午餐餐後的紅豆豆花、跟晚上的超～大雞腿便當。該怎麼說呢 &amp;hellip;，好難想像不到一個月前的我，每天都還需要很認真很用力地跟自己說 &amp;ldquo;要活下來！&amp;rdquo; 才可以撐下去，但現在的我真的感覺好幸福、好幸福 &amp;hellip;。</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202402/20240210/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202402/20240210/</guid>
      <description>日記：2024/02/10#今天是入伍的第 25 天、入院的第 20 天，也是農曆甲辰年的第 1 天。
昨天除夕的晚餐時間跟阿公通過電話了！聽起來還蠻順利的，阿公的心情似乎還算不錯，不知道他們的年夜菜吃了什麼？應該也跟往年一樣是從外面買來的吧。除此之外，昨天也打給了工具人淑芬，主要需要麻煩她幫我拿晉安的聯絡方式，還有 BOSS 年末捐款的一些活動細節。她們年末應該會有類似的募款活動吧？有的話我可不想缺席～畢竟捐錢一直都是我很熱衷的一項活動！哈哈哈！（雖然有時候會被人騙錢就是了（哭））。
昨天也照常 21:00 吃完藥之後就直接躺床睡覺，就像昨天日記說的：原本以為晚上 11, 12 點左右會被過年的鞭炮聲給吵醒，但意外地並沒有！反倒是 1 點多快 2 點多的時後有稍微醒一下，起來上廁所。看來廖醫生跟程育耳塞的組棉 combo 效果非常有效呢！昨天也是在我有記憶以來，第 1 次除夕晚上不是在家裡面吃飯，老實說我在當兵之前的確有想過「乾脆入伍之後的 4 個月都不要回家，連過年之類的也在軍中過就好了。」但我壓根也沒有想到我最後會是在精神病院吃除夕的年夜飯就是了～說實在還算蠻新鮮的，雖然感覺很不真實，但它的確真實發生了。
另外，關於閱讀的部分：《高階 4》目前看到「天同」那章的一半（第 5 章的一半），預計明天（最慢最慢後天）會把整本書本看完（共 17 章）。也因為《高階 4》是我手邊最後一本關於紫微的書籍的（《高階 5》和其他的書我都還沒買），所以預計在下次會客的時候，我會麻煩家人帶古占（古典占星）、現代占星、或者是一些藏傳佛教的書籍。這 3 個大方向目前是以 &amp;ldquo;藏傳佛教&amp;rdquo; 的興趣最大：畢竟之前準提佛母有跟我說「我算是個跟藏傳佛教蠻有緣的人，有機會的話可以多多了解。」但我從那之後到現在過了 2~3 年才開始起步，是不是有點太晚了啊 xDD.</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202402/20240211/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202402/20240211/</guid>
      <description>日記：2024/02/11#（2/12 10:05 補寫）#今天永清阿伯被送進保護室了。
永清阿伯就是過年前新進來，睡在我隔壁的 23 床病友（詳見 2/5 的日記內容）。永清阿伯從外人來看的話，會覺得他一直都有自言自語的習慣。他平常人很好、很有活力、遇到人會打招呼、也可以正常地聊上幾句話。只不過永青阿伯有一個小小地問題——就是他會跟一位只有他才看得到的「朋友」聊天。我們先暫時把祂稱作 A 好了～從阿伯的行為（和我自己的感受與觀察）來看，A 應該是隨時隨地都跟在阿伯身邊，A 不會傷害他，但在日常生活上很常跟阿伯持相反的意見。
很常聽見阿伯說出類似「就跟你說不要這樣擺嘛」「好啦好啦明天開始聽祢的」之類的內容。但 A 感覺起來並不是阿伯的親人或朋友之類的熟人？我有嘗試過問阿伯說 A 是誰？阿伯那時候就只會說「就站在那邊的那個啦」，然後如果追問其他細節（像男女、年紀、外貌 &amp;hellip;之類的）他同樣也只會說「阿反正就那邊那個啦」。護理站的姊姊們有因為想要 &amp;hellip;讓 A 消失(?)特別開給阿伯一些比較額外的藥，但阿伯每次只要看到那個藥就會很抗拒去吃它。
這次阿伯會被關進保護室的原因也是跟這個有關：案發當時我正在洗澡，所以沒有目擊到第一現場，但根據程育所說（程育 24 床），那時候是吃完晚餐飯後藥的自由時間（18:00 後），他跟阿伯歐在房間睡覺，接著突然進來了至少 4 個左右全副武裝的保全大哥，說他們在餐廳的某個角落找到阿伯偷偷吐掉的藥，所以要阿伯重新把藥吃掉。但阿伯抵死不從，所以就這樣被關進保護室了（事後回想有點無釐頭，也有點搞笑），總之，這就是今天的日記內容了。</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202402/20240212/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202402/20240212/</guid>
      <description>日記：2024/02/12#（2/13 07:45 補寫）#連續 2 天忘記寫日記，有夠懶惰 XD.
今天久違地跑了一次體能訓練，會這麼做的主要原因有 2 個：第 1 個是自從我入伍之後，就一直有比較嚴重的便秘問題，這幾天跟護理師的姐們討論過後，她們說之前在軍營裡可能是因為壓力太大，在這裡則可能是運動量變小的關係（加上這裡不提供類似早餐店大冰奶之類的飲料），所以建議我可以增加運動量看看；另一個原因則是因為家裡帶來的書籍我昨天晚上全部都看完了，所以自己的時間也變多了（一天大概多了至少 3 小時有）。因此，綜合上述兩點：今天的我就把這些多出來的時間拿來跑體能了。
今天因為是久違地運動（入院之後的第一次），所以只先暖身跑了 2 組遇線折返（一組來回一次，所以總共是來回 6 次），兩組中間跟做完之後會再做一次的「手忙腳亂」當短休息。整體而言的心得是：雖然只過了大概 1 個月，但體能很明顯地下降了很多。看來之後得多做幾次，把之前的體能給拉回來才行！此外～今天也有一個值得紀錄的事情：那就是我的體前彎可以在膝蓋不彎曲的前提下碰到地板了！（入院之後每天都有在練習。）如果用以前「25 公分 = 剛好碰到地板」的標準來看的話，我的進步幅度大概就是從 8~9 左右進步到 24.8 ~ 25.1 之間。對我來說算是蠻高興的一件事情，再來的目標就是 30，然後 35，再到 40。
最後，今天下午 13:30 也有會客（這次來的是我爸跟我妹），誠如之前我說的，他們幫我帶來的約莫 6~8 本左右與藏傳佛教有關的書。它們是我之前一個國中朋友，在開始吃齋念佛之後所閱讀的一些書籍。準確來說：是那個協會（或那個佛堂？）免費發送給有緣人的一些書籍。雖然基本上都是一本一本拿，但那時候的我很厚臉皮第一次拿走了一整套（約莫 20 本書），然後就擺在我的書櫃當裝飾了 XD，希望這次拿過來之後，它們可以派上用場，讓我多學到一點關於藏傳佛教的理念、知識、和相關的活動與習俗！</description>
    </item>
    
    <item>
      <title>日記</title>
      <link>https://fonu195713.github.io/docs/_trash/diary/202402/20240213/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/diary/202402/20240213/</guid>
      <description>日記：2024/02/13#入院的第 23 天。
雖然賴床的狀況有點惡化（從原定的 5:45 被我拖到快 6:00 才起來），但今天早上在簡單的盥洗之後，還是以 3 組遇線折返、3 組 50 下開合與 10 下伏地挺身、和 20 圈的廣場繞跑為美好的早晨拉開精力充沛的序幕。可以感受到在過程之中，身體幾乎維持在 95% 極限的狀態，如果全部再多加一組的話（也就是多一趟折返、50 次開合跳、10 伏地挺身、跟 5 圈廣場）就會是我 102~105% 的極限了。
之前讀碩士的時候，一直有「一天到底要怎樣才可以喝到 2000cc 的水啊」的疑問，但我現在找到解答了！原來這麼簡單：就只是因為我上大學之後運動量一直沒有像現在這麼多而已（以前只有簡單的每天跑 3000）。今天光是早上的「第一次」訓練，就喝掉了 1500+ 的量，配上早上服藥後的「第二次」和中午睡醒後的「第三次」，我今天大概喝了 4000~5000 有吧？身體目前沒有什麼太大的問題，唯一比較擔心的事情是我第三次最後的收操沒有收得很好，所以小腿腳踝那邊到現在都還是有一點點酸酸的，有點期待明天、後天 &amp;hellip;之後的運動時間。
另外，今天還有 2 間可以分享的事情：第 1 件事情是賴桑在下一次的會客（2/17, 13:30）會來看我，不知道他那時候會帶什麼東西來？真是期待；另一件事情是——佛教相關的書有點 &amp;hellip;&amp;ldquo;難讀&amp;rdquo;。不知道是不是剛好都挑到我比較不擅長的書的原因？扣掉任何跟算命有關的書。我比較喜歡那框架感很薄、思考空間很廣泛（像是傳記類、哲學類、）或者是框架感很重，但相對基礎同樣也很牢實（像數理化）的書。但這次他們帶來的書剛好是那種「框架感很重，但基底很不明確、無法證明、甚至幾乎沒有，或底層根據本身就互相矛盾」的那種書。看來我下次還是麻煩我家人帶占星類型的書好了。</description>
    </item>
    
    <item>
      <title>最少知識原則</title>
      <link>https://fonu195713.github.io/docs/_trash/design_pattern/least_knowledge_principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/design_pattern/least_knowledge_principle/</guid>
      <description>最少知識原則#ChatGPT 的說明 最少知識原則（Least Knowledge Principle），又被稱為迪米特法則（Law of Demeter，LoD），是物件導向程式設計中的一個設計原則。它的核心思想是「一個物件應該盡量減少與其他物件」的交互，只與其直接的 &amp;ldquo;朋友&amp;rdquo; 進行通信或配合，不應該暴露過多的內部細節、或與其他物件產生過多的依賴關係。利用最少知識原則，程式設計師可以減少系統中各個類別之間的耦合度，從而提高程式碼的可維護性和可擴展性。該原則強調了 &amp;ldquo;封裝&amp;rdquo; 的重要性，每個物件應該對其他物件知道得越少越好，只暴露必要的介面供其他物件使用。這個原則的一個常見範例是「在一個類別的方法中，避免直接存取其他物件的屬性，而應該透過該物件的方法來實現所需的操作。」這樣可以降低類別之間的依賴關係，使系統更容易維護和擴展。最少知識原則的主要目標是降低系統的複雜性，改善程式碼的可讀性和可維護性，以及減少潛在的錯誤和問題。它是物件導向設計的重要原則，有助於創造更健壯可靠的軟體系統。
此外在物件導向程式設計中，一個物件的 &amp;ldquo;朋友&amp;rdquo; 是指那些與之有直接關聯的類別或對象。以下是一些可以被視為物件的 &amp;ldquo;朋友&amp;rdquo; 的範例：［自身的成員變數］一個物件可以直接存取自身的成員變數或屬性。［傳入方法的參數］一個物件（或方法）可以直接存取傳遞進來的參數，但不包含該參數的其他成員變數或方法。［方法內部建立的對象］如果一個方法內部創建了新的對象，那麼這些對象通常可以被認為是呼叫該方法的對象的 &amp;ldquo;朋友&amp;rdquo;。［關聯關係的物件］如果一個物件與其他物件有關聯關係（例如，組合、聚合、依賴關係等），那麼這些相關物件也可以被視為該物件的 &amp;ldquo;朋友&amp;rdquo;。但是，應該盡量避免直接存取關聯對象的內部細節，而是透過公共介面進行通訊。［從其他物件獲得的回傳值］如果一個物件呼叫了另一個物件的方法，並且接收到了該方法的回傳值，那麼該傳回值的物件可以被視為呼叫物件的 &amp;ldquo;朋友&amp;rdquo;。 需要注意的是，儘管可以與這些 &amp;ldquo;朋友&amp;rdquo; 進行交互，但也要確保不過度依賴它們的內部細節，以保持物件之間的鬆散耦合關係。透過僅與必要的物件通信，可以提高系統的可維護性和可擴展性，使系統更有彈性、更容易維護。
簡單整理 只跟足夠親近的「朋友」交流，不要跟朋友的朋友說話。
程式碼範例 迪米特法則的核心是「盡量保持鬆耦合」的設計思想：當一個物件（或一個方法）需要透過很 &amp;ldquo;遠&amp;rdquo; 的呼叫，才可以完成某項功能時，就代表該物件對於呼叫中的所有東西都保持著依賴關係，那這時候，只要這一條依賴關係的任一截點出現問題，就都有可能導致功能的毀損，進而影響整個程式的運作。舉個例子：我們假設在一間上市公司中，從公司最大的「老闆」一路到最基層的「員工」有以下的這幾個階層：老闆（Boss）&amp;gt; 各部門的部處長（DepartmentDirector）&amp;gt; 專案經理（ProjectManager）&amp;gt; 員工（Staff）。然後今天老闆想要讓自己的公司網頁新增一項功能，他將這件事情告訴了 IT 部門的部處長，處長為此成立了一個「網站專案團隊」，並指派一位資深員工為專案經理讓他挑選幾位處理該專案的員工（Staff）來完成老闆所需的工作。如果在這樣的情況下，老闆想要追蹤一下這個網頁功能的更新，那可能會發生這樣的問題：
Log websiteInfo = boss.getDepartmentDirector(&amp;#34;IT&amp;#34;).getProjectManager(&amp;#34;web&amp;#34;).getStaff().getTaskLog(); 我們可以看到：光是 Boss 想要拿到一條「網站的更新紀錄」，就需要經過至少 3 ~ 4 個人的手，除了在實務的情況下，這麼做的效率可能有點低下之外，對於程式的撰寫來說，這種寫法也是挺有風險的，畢竟我們沒有辦法保證「呼叫上的所有方法即使產生了細節上的改變，程式也能完整運行」（例如 getProjectManager() 突然不用 &amp;ldquo;專案名稱&amp;rdquo; 做為參數，改用 &amp;ldquo;專案代號&amp;rdquo; 之類的），因此，迪米特法則告訴了我們「不要跟這麼多人講話」，也就是不要依賴過多的 &amp;ldquo;陌生人&amp;rdquo;。盡可能只透過，跟身邊的「朋友」聊天，就能拿到必要的資訊。降低方法間的相互調用，也就降低了「依賴於 &amp;lsquo;方法&amp;rsquo; 的一致性」，進而提升程式整體的品質，就是迪米特法則想要告訴我們的事情。
Log websiteInfo = boss.getInfo(&amp;#34;WebsiteUpdate&amp;#34;); 朋友 知道了法則想要傳遞的訊息之後，接下來就可以往下一步走了：哪些人、哪些東西、哪些物件、哪些方法才是所謂的「朋友」？一般來說，常見對於「朋友」的定義有以下四種：「類別本身的成員變數」「類別本身的方法」「父類別的所有成員與方法」「傳入方法中的所有參數」以及「在方法中建立的任何物件」。可以發現到朋友的類型可以根據是類別還是方法有所不同，這也是該原則比較特別的一個地方：不僅適用於類別的角度，也適用於方法的角度。
類別本身的成員變數 這個應該滿好理解的？畢竟是「自己本身就有的東西」。「類別本身的成員變數」可以視為是一個自己的親近朋友，無論是 &amp;ldquo;基本資料型態&amp;rdquo;（像是 int, float, long, double &amp;hellip;等），或者是 &amp;ldquo;參考資料型態&amp;rdquo;（各種類別：諸如 Object, System, Boss, Staff, Library &amp;hellip;等），只要是類別自己有的東西，都可以視為自己的朋友，這點也包含所有的父類別、父父類別、父父父類別 &amp;hellip;等。</description>
    </item>
    
    <item>
      <title>簡單工廠模式</title>
      <link>https://fonu195713.github.io/docs/_trash/design_pattern/simple_factory_pattern_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/design_pattern/simple_factory_pattern_1/</guid>
      <description>簡單工廠模式#ChatGPT 的說明 簡單工廠模式（Simple Factory Pattern）是一種創建型設計模式，屬於工廠模式的變體。它旨在提供一個通用的、用於創建物件的接口，而隱藏創建物件的具體細節。簡單工廠模式由三個主要部分組成：［客戶類別］（Client class）：客戶是使用工廠模式的程式碼部分。客戶透過呼叫簡單工廠裡的公開方法（例：getProduct()），請求工廠創建具體產品的物件。［工廠類別］（Factory Class）：工廠類別負責生成具體的物件。這個類別通常包含一個（或多個）靜態方法，根據輸入的參數或條件建立不同類型的物件。[具體產品類別]（Concrete Product Class）：具體產品類別是簡單工廠最後會產出的物件，工廠類別透過判斷條件或參數來建立不同的特定產品物件。（可選）［抽象產品類別］（Abstract Product Class）：在某些簡單工廠中還會定義一個抽象產品類別。該類別定義了產品物件的通用接口，它是所有特定產品類別的共同父類別或介面。
簡單工廠模式的步驟如下：首先，定義一個抽象的產品類，讓該類別定義一些產品的共同介面或抽象方法，或者直接建立具體的產品類，實作抽象產品類別的介面或方法，定義具體產品的屬性與行為。接著，建立一個工廠類別，該工廠類別可以包含一個靜態方法或非靜態方法，根據輸入參數或條件建立並傳回特定產品的實例。最後，客戶端可以透過呼叫工廠類別的靜態（或非靜態）方法來取得所需的具體產品實例。
簡單工廠模式包含著幾個優點：它可以封裝物件的建立過程。透過簡單工廠模式，客戶端可以在「不需要知道物件的具體建立細節」的前提下獲得物件。降低了客戶端與特定產品類別之間的耦合度。除此之外，這種做法也提升了程式的靈活性，因為客戶端只需要依賴於工廠所提供的方法或介面即可，不需要依賴任何的具體產品。再來，工廠可以根據不同的需要，動態切換回傳給客戶的具體產品類，而不影響需要客戶端的程式碼 &amp;hellip;。然而，簡單工廠模式還是有著一些缺點的：例如每次增加新的產品類型時，都需要修改工廠類，違反了開放封閉原則。除此之外，在一些複雜的場景下，可能會導致簡單工廠需要負責過多的產品細節，使得類別變得過與旁大過於臃腫，進而違反單一職責原則。
簡單整理 問題描述：Client 對於 Product 有著高度的依賴
解決方案：透過建立一個 Factory 類別，解決客戶與產品間的依賴
程式細節：參照下面的段落
UML 圖：
程式碼範例 在常見的設計模式裡面，跟「工廠」有關的設計模式共有三種，分別是簡單工廠模式、工廠方法模式、和抽象工廠模式。簡單工廠模式顧名思義，就是透過一個工廠，來簡單地改寫程式碼的一種設計模式。讓我們來想像一種情境：假設我們正在製作一個「繪製不同圖型」的程式，裡面有一個一個用來繪製圖形的畫布 Canvas，以及一些預設的可繪製圖形 Circle, Square, Rectangle, Triangle, 和 Polygon &amp;hellip;等。我們首先假設所有的圖形都繼承於 Shape 類別，我們也假設只要呼叫 Canvas 裡面的 addShape() 方法，並透過傳入的 String 參數，該方法就會幫我們繪製圖形，如下所示：
// 抽象父類別 [形狀] abstract class Shape {} // 各種繼承 [形狀] 的子類別們 class Circle extends Shape {} class Square extends Shape {} class Rectangle extends Shape {} class Triangle extends Shape {} class Polygon extends Shape {} // 繪圖類別 `Canvas` class Canvas { public void addShape(String shape) { // 建立圖形變數 &amp;#39;shape&amp;#39; Shape shape = null; // 把 &amp;#39;shape&amp;#39; 變成我們預設的其中一種形狀 if(shape.</description>
    </item>
    
    <item>
      <title>簡單工廠模式</title>
      <link>https://fonu195713.github.io/docs/_trash/design_pattern/simple_factory_pattern_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/design_pattern/simple_factory_pattern_2/</guid>
      <description>簡單工廠模式#ChatGPT 的說明 簡單工廠模式（Simple Factory Pattern）是一種創建型設計模式，屬於工廠模式的變體。它旨在提供一個通用的、用於創建物件的接口，而隱藏創建物件的具體細節。簡單工廠模式由三個主要部分組成：［客戶類別］（Client class）：客戶是使用工廠模式的程式碼部分。客戶透過呼叫簡單工廠裡的公開方法（例：getProduct()），請求工廠創建具體產品的物件。［工廠類別］（Factory Class）：工廠類別負責生成具體的物件。這個類別通常包含一個（或多個）靜態方法，根據輸入的參數或條件建立不同類型的物件。[具體產品類別]（Concrete Product Class）：具體產品類別是簡單工廠最後會產出的物件，工廠類別透過判斷條件或參數來建立不同的特定產品物件。（可選）［抽象產品類別］（Abstract Product Class）：在某些簡單工廠中還會定義一個抽象產品類別。該類別定義了產品物件的通用接口，它是所有特定產品類別的共同父類別或介面。
簡單工廠模式的步驟如下：首先，定義一個抽象的產品類，讓該類別定義一些產品的共同介面或抽象方法，或者直接建立具體的產品類，實作抽象產品類別的介面或方法，定義具體產品的屬性與行為。接著，建立一個工廠類別，該工廠類別可以包含一個靜態方法或非靜態方法，根據輸入參數或條件建立並傳回特定產品的實例。最後，客戶端可以透過呼叫工廠類別的靜態（或非靜態）方法來取得所需的具體產品實例。
簡單工廠模式包含著幾個優點：它可以封裝物件的建立過程。透過簡單工廠模式，客戶端可以在「不需要知道物件的具體建立細節」的前提下獲得物件。降低了客戶端與特定產品類別之間的耦合度。除此之外，這種做法也提升了程式的靈活性，因為客戶端只需要依賴於工廠所提供的方法或介面即可，不需要依賴任何的具體產品。再來，工廠可以根據不同的需要，動態切換回傳給客戶的具體產品類，而不影響需要客戶端的程式碼 &amp;hellip;。然而，簡單工廠模式還是有著一些缺點的：例如每次增加新的產品類型時，都需要修改工廠類，違反了開放封閉原則。除此之外，在一些複雜的場景下，可能會導致簡單工廠需要負責過多的產品細節，使得類別變得過與旁大過於臃腫，進而違反單一職責原則。
簡單整理 問題描述：Client 對於 Product 有著高度的依賴
解決方案：透過建立一個 Factory 類別，解決客戶與產品間的依賴
程式細節：參照下面的段落
UML 圖：
程式碼範例 在常見的設計模式裡，跟「工廠」有關的設計模式共有三種。它們從簡單到複雜分別是簡單工廠模式、工廠方法模式、和抽象工廠模式。簡單工廠模式顧名思義，就是透過生成一個「簡單的」工廠，來分離不同職責的程式碼，讓程式可以達到更好的靈活性、可讀性，和良好的封裝性。讓我們用一個簡單的例子來做說明：假設我們現在正在撰寫一個「資料庫操作程式系統」，該系統需要包含一些使用者對於資料庫的簡單操作，像是 SELECT, UPDATE&amp;hellip;等，在不使用簡單工廠模式的情況下，程式可能會寫成像是下面的這個樣子：
// 資料庫系統中的 [使用者] 類別 class User { private Database database; private String account; private String password; public User(String account, String password) { this.account = account; this.password = password; } public QueryResult query(Database.operation operation, String query) { this.database = this.</description>
    </item>
    
    <item>
      <title>簡單工廠模式</title>
      <link>https://fonu195713.github.io/docs/_trash/design_pattern/simple_factory_pattern_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/design_pattern/simple_factory_pattern_3/</guid>
      <description>簡單工廠模式#ChatGPT 的說明 簡單工廠模式（Simple Factory Pattern）是一種創建型設計模式，屬於工廠模式的變體。它旨在提供一個通用的、用於創建物件的接口，而隱藏創建物件的具體細節。簡單工廠模式由三個主要部分組成：［客戶類別］（Client class）：客戶是使用工廠模式的程式碼部分。客戶透過呼叫簡單工廠裡的公開方法（例：getProduct()），請求工廠創建具體產品的物件。［工廠類別］（Factory Class）：工廠類別負責生成具體的物件。這個類別通常包含一個（或多個）靜態方法，根據輸入的參數或條件建立不同類型的物件。[具體產品類別]（Concrete Product Class）：具體產品類別是簡單工廠最後會產出的物件，工廠類別透過判斷條件或參數來建立不同的特定產品物件。（可選）［抽象產品類別］（Abstract Product Class）：在某些簡單工廠中還會定義一個抽象產品類別。該類別定義了產品物件的通用接口，它是所有特定產品類別的共同父類別或介面。
簡單工廠模式的步驟如下：首先，定義一個抽象的產品類，讓該類別定義一些產品的共同介面或抽象方法，或者直接建立具體的產品類，實作抽象產品類別的介面或方法，定義具體產品的屬性與行為。接著，建立一個工廠類別，該工廠類別可以包含一個靜態方法或非靜態方法，根據輸入參數或條件建立並傳回特定產品的實例。最後，客戶端可以透過呼叫工廠類別的靜態（或非靜態）方法來取得所需的具體產品實例。
簡單工廠模式包含著幾個優點：它可以封裝物件的建立過程。透過簡單工廠模式，客戶端可以在「不需要知道物件的具體建立細節」的前提下獲得物件。降低了客戶端與特定產品類別之間的耦合度。除此之外，這種做法也提升了程式的靈活性，因為客戶端只需要依賴於工廠所提供的方法或介面即可，不需要依賴任何的具體產品。再來，工廠可以根據不同的需要，動態切換回傳給客戶的具體產品類，而不影響需要客戶端的程式碼 &amp;hellip;。然而，簡單工廠模式還是有著一些缺點的：例如每次增加新的產品類型時，都需要修改工廠類，違反了開放封閉原則。除此之外，在一些複雜的場景下，可能會導致簡單工廠需要負責過多的產品細節，使得類別變得過與旁大過於臃腫，進而違反單一職責原則。
簡單整理 問題描述：Client 對於 Product 有著高度的依賴
解決方案：透過建立一個 Factory 類別，解決客戶與產品間的依賴
程式細節：參照下面的段落
UML 圖：
程式碼範例 在常見的設計模式當中，跟「工廠」有關的設計模式共有三種，它們從簡單到複雜分別是簡單工廠模式、工廠方法模式、和抽象工廠模式。簡單工廠模式顧名思義，就是透過一個結構「簡單」的工廠，來將程式碼拆分，以提高程式系統的可讀性、靈活性、和可擴展性。讓我們以一個簡單的例子來做說明：假設我們現在需要製作一個「網站架設系統」，該系統需要包含一些關於前後端的程式內容，而其中一項功能的描述如下：「使用者可以透過輸入不同的 SQL 語句，來取得不同的資料庫內容。」用程式來呈現的話，可能會像這個樣子：
// 架站系統中的 [客戶端] 類別 class Client { private String account; private String password; public Object getDatabaseData(String query) { Database database = this.getDatabaseConnection(account, password); Object data = null; Database.Operation operation = database.getOperation(query); switch(operation) { case Database.Operation.INSERT: data = database.insertQuery(query); break; case Database.</description>
    </item>
    
    <item>
      <title>里氏替換原則</title>
      <link>https://fonu195713.github.io/docs/_trash/design_pattern/liskov_substitution_principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/_trash/design_pattern/liskov_substitution_principle/</guid>
      <description>里氏替換原則#ChatGPT 的說明 里氏替換原則（Liskov Substitution Principle，LSP）是 SOLID 設計原則中的一項原則，由電腦科學家芭芭拉·利斯科夫（Barbara Liskov）於 1987 年首次提出。里氏替換原則強調了「子類別應該能夠取代其基底類別，而不會影響程式的正確性。」簡而言之，該原則表明：如果一個類型是某個抽象類型的子類型，那麼它應該可以取代該抽象類型的任何實例而不引發錯誤。
LSP 的核心觀點包括以下幾個面向：首先，［子類別必須保留基底類別的所有行為］這代表子類別在繼承基底類別時，必須保留基底類別的行為。也就是子類別應該實作基底類別中所定義的方法，並且這些方法的行為不應該與基底類別不同。其次，［子類別可以加強基底類別的行為］雖然子類別必須保留基底類別的行為，但是子類別可以透過覆寫基底類別方法（或添加新的方法）來加強（或擴展）基底類別的行為。這也代表著子類別可以提供相對於基底類別更多的功能，但不應該改變基底類別的行為。此外，［子類別可以限制基底類別的行為］子類別可以限制基底類別的行為，但不能擴展或改變基底類別的行為。這意味著子類別可以透過覆蓋基類方法來限制某些操作的效果，但不能使這些操作變得更強或更複雜。最後，［子類別的方法參數和傳回值要與基底類別一致］子類別的方法參數類型要與基底類別一致（或更為具體），而傳回值類型要與基底類別一致或（更通用）。
這些面謝確保了客戶端程式碼可以放心地使用子類別對象，而不必擔心類型不匹配的問題。LSP 的遵循有助於保持程式碼的一致性、可維護性和可擴充性。它還有助於實現多態性，使得客戶端程式碼可以處理多個子類別物件而不需要知道特定的子類別類型。LSP 在物件導向程式設計中非常重要，它幫助我們建立穩健的繼承體系，使程式碼更容易理解和維護。
簡單整理 簡單來說：父類別沒有的，子別類不一定要有，但是父類別有的，子類別都一定要有
程式碼範例 里氏替換原則討論的是關於類別（或介面）發生繼承時，應該遵守或者是留意一個規範或想法。大致上的重點在於「子類別應該完全實現父類別的想法」「子類別可以對付類別的想法作出補充」以及「子類別應該遵循與父類別一致的規則」這句話上面。簡單來說就是「父類別的擁有和要求，子類別都要做到」但「父類別沒有要求的，子類別可以不用做到」這兩句話上。
自己稍微唸了一下，感覺還是有點饒口，直接用一個範例程式碼來做舉例好了：假設我們現在受到了某某大型運輸公司的委託，需要製作一個該公司的「交通工具查閱系統」，裡面需要包含一些常見的交通工具的相關資訊，像是汽車、船、機車、公車、腳踏車、直升機、飛機 &amp;hellip;等，在最最直觀的情況下，我們可以把所有的交通工具都寫成互不相關的獨立類別，就像是下面的這個樣子：
class Car { String id; String type; public void driving() { System.out.println(&amp;#34;在馬路上行駛&amp;#34;); } // 其他跟[汽車]有關的方法 // 其他跟[汽車]有關的方法 } class Boat { String id; String type; public void sailing() { System.out.println(&amp;#34;在河道或海中航行&amp;#34;); } // 其他跟[船]有關的方法 // 其他跟[船]有關的方法 } &amp;hellip;（還有其他好多類型的交通工具）
class Helicopter { String id; String type; public void flight() { System.</description>
    </item>
    
  </channel>
</rss>
