<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>閱讀心得 on Fonu Site</title>
    <link>https://fonu195713.github.io/docs/life/reading_experience/</link>
    <description>Recent content in 閱讀心得 on Fonu Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://fonu195713.github.io/docs/life/reading_experience/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clean Architecture - 無瑕的程式碼</title>
      <link>https://fonu195713.github.io/docs/life/reading_experience/clean_architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/life/reading_experience/clean_architecture/</guid>
      <description>Clean Architecture - 無瑕的程式碼#心得編寫日期：2023-??-??
書籍超連結
內文：
評分
閱讀難度：★★★★☆ 推薦指數：★★★☆☆ </description>
    </item>
    
    <item>
      <title>深入淺出設計模式</title>
      <link>https://fonu195713.github.io/docs/life/reading_experience/head_first_design_patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/life/reading_experience/head_first_design_patterns/</guid>
      <description>深入淺出設計模式#心得編寫日期：2023-07-07
書籍超連結
內文：
一直以來，我都對「設計模式」這個東西抱著若有似無的認知。具象一點說明的話，大概就是「知道『設計模式』是一種可以讓程式寫得更加漂亮、更有彈性的觀念和方法，但實際上這些觀念是什麼（我不知道），那些方法又該如和撰寫（我也不知道）」的狀況。然後在今年 5 月底左右吧？因為第二篇論文出現了一點卡關的狀況（文章的內容一直沒辦法寫成老師期望的那種感覺），也因為患有一點研究生症候群，就開始找手邊一些「一直以來都有興趣，但又找不到合適的時間去了解」的東西進行研究了。而這之中，【研究設計模式】剛好是其中之一。
這邊的 &amp;ldquo;研究設計模式&amp;rdquo; 是指「閱讀和設計模式相關的書籍」。這邊我挑的是《深入淺出設計模式》並不是閱讀比較主流的《Design Patterns: Elements of Reusable》也就是四人幫撰寫的那本）。會選擇那本書的其中一個原因是：剛開始的我，並不知道這本設計模式的聖經本，另一個原因則是它是我最快速能找到的相關書籍，所以就&amp;hellip; 這樣開始了。
雖然在四人幫的著作中，共列舉了 23 種常見的設計模式，但本書並沒有包含這麼多的內容。書中的 13 個章節裡，扣掉最後一個章節在介紹 MVC 架構（Model, View, Controller），以及倒數第 2 章在介紹不同模式的合併用法之外，其餘的 11 個章節依序僅介紹了 Strategy（策略模式）、observer（觀察者）、decorator（裝飾器）、factory（工廠模式，包含簡單工廠、工廠方法、和抽象工廠）、singleton（單例模式）、Command（命令模式）、Adapter（配適器）、Facade（外觀）、Template method（模板方法）、Iterator（迭代器）、Composite（組合模式）、State（狀態模式）、Proxy pattern（代理）&amp;hellip; 等。剩餘的模式則僅於書中的附錄稍作提及。但這並不代表這本書不是一本良好的教學素材。相反地，因為本書的撰寫方式有別於市面上大多數的教學書籍，採用了極大量的圖片、角色對話、與情境式的描述，為各種模式的優缺點、應用情境、特徵、使用方法做大量的說明，同時也附上了許多的觀念思考、練習題、與程式範本，因此在閱讀上，並不會出現常見的倦怠、疲憊、或單調的感覺。
整體而言，這本書帶給我很多新的啟發，無論是程式的撰寫方式，例如「多用組合、少用繼承」「單一類別、單一職責」「依賴通用接口，不要依賴特定類別」&amp;hellip; 等，或者是各種不同模式的應用與架構「工廠模式可以讓物件的實例化延後至子類別中實現」「模板方法只關心演算法的骨幹，因此可以在不改變演算法結構的前提下，重新定義某些方法的執行細節」「單例模式可以讓類別只生成單一物件，以確保某些資源的分配不會遇到問題或錯誤」&amp;hellip; 等，抑或是程式的語法觀念，像是「C++ 的物件繼承，菱形繼承的問題與解決」「虛函數, 純虛函數」&amp;hellip; 等，都是在閱讀本書之後才有了一個更加明確與更加清晰的認識。雖然是在一個比較非主動的動機下，才開始閱讀本書，但整體而言，能夠「閱讀本書，並從書本當中學到了更多的知識」對我來說實在是一件很高興又很喜歡的事情。
評分
閱讀難度：★★★☆☆ （需要有基本的物件導向程式觀念） 推薦指數：★★★★★ </description>
    </item>
    
    <item>
      <title>祈念之樹</title>
      <link>https://fonu195713.github.io/docs/life/reading_experience/the_camphorwood_custodian/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fonu195713.github.io/docs/life/reading_experience/the_camphorwood_custodian/</guid>
      <description>祈念之樹#心得編寫日期：2024-03-02
書籍超連結
內文：
這是我在十六病房裡閱讀的第一本書，甚至比我那一系列勸學齋主的紫微斗數還要早看。講述的是一個平凡的日本少年，在一次的因緣際會下，繼承了家族代代相傳的一份重要工作——樟樹的守護人，並以此為故事的核心，一步一步地挖掘、探索這份工作的內容、意涵、與重要性。整體來說，故事懸疑和解謎的成分很大，但沒有恐怖、血腥、或驚悚的氛圍在裡面，算是一個普遍級的優秀作品。然後隨口說一下，相對於《祈念之樹》，我其實更喜歡原日文《クスノキの番人》也就是《樟樹的守護者）的這個名稱。
「衷心期望樟樹可以接收到你的心願。」#整部小說採用封閉式劇情的書寫方法。大概在小說的前 20 頁裡，就把故事所有「前因」（世界觀、主角的背景、和主角的目標）都說完了，很高效地把幾乎所有的篇幅都放在故事的「後果」之上。為什麼素未謀面的律師要替主角解圍？為什麼神秘人委託了律師這份工作？為什麼神秘人讓他接任一個看似毫不等價（甚至可以說是輕鬆過頭）的工作？所謂「樟樹守護人」的重要性到底在哪裡？白天的祈念和夜晚的祈念又有何差異？也為什麼一定要使用「祈念」這個詞，而非「祈願」「許願」、或其他等類似的字語？又為什麼會有人想要虧探那些祈念者的祈念過程？ &amp;hellip;諸如此類的問題會在故事的各個地方浮現，當你解決一項問題之後，另一項問題又會接踵而至，可以說是完全沒有鬆散篇幅的緊湊作品。
此外，除了一點點「神秘力量」的架空設定，以及關於「記憶」「回憶」的描述以外，這部小說對「親情」（準確來說是「家人」）的描寫占了很～大很大的比重，幾乎可以說是完全在探討關於家人的一部作品。在本作中，無論是主角、女主角、重要的幾個配角、亦或是其他在小說中出現的所有角色，無一例外都在探討關於「家人」這份情感的意義與價值。除了世俗意義上父親母親、兄弟姐妹 &amp;hellip;的那種家人外，裡面也有聊到類似「一定要有血緣關係，才是所謂的『家人』嗎？」「如果我有一群相信我的部署和上司，那他們也能算是我的『家人』嗎？&amp;hellip;等較為廣泛的層面與議題。
老實說，因為從小的生活習慣，我很不擅於處理這種面向的問題（或者可以說是刻意避開思考這類型的問題），但也因為如此，我才能很沈浸在故事所建構的氛圍之中（主角在小說的設定上，也是一個幾乎沒有和任何家人有過深度交流的人物）。我猜，因為這本小說的內容與調性（神秘學、親情、慢節奏），這也是我的家人選擇在我入院之後，第一次送書時就給我這本小說的原因（我那時候除了麻煩他們送來我想看的書籍以外，就只有這本書是「額外」的）。就結果而言，它的確帶給了我一些啟發。總的來說，如果你是一位不排斥接觸這類議題，又喜歡閱讀小說的人，我很誠摯地推薦這部作品。
評分
閱讀難度：★☆☆☆☆ 推薦指數：★★★★★ </description>
    </item>
    
  </channel>
</rss>
